$(document).ready(function () {
    $.ajaxSetup({
        headers: {
            'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
        },
    });

    $(document).ajaxError(function (event, jqxhr, settings, thrownError) {
        if (jqxhr.status === 401) {
            window.location = "/";
        }

        if (jqxhr.status === 419) {
            window.location = location.toString();
        }
    });
});

function ajaxRequest(url, data = null, options = {}) {
    let jqxhr = $.ajax({
        type: options.method || 'POST',
        url: url,
        dataType: options.dataType || 'json',
        data: data,
        cache: false,
        async: typeof options.async !== 'undefined' ? options.async : true,
    });

    jqxhr.done(function(response) {
        if (options.callback || false) {
            options.callback(response);
        }
    });

    jqxhr.fail(function(response) {
        if (options.failCallback || false) {
            options.failCallback(response);
        }
    });

    return jqxhr.responseJSON;
}

function replace_template( template, data ) {
    return template.replace(
        /{(\w*)}/g,
        function( m, key ){
            return data.hasOwnProperty( key ) ? data[ key ] : "";
        }
    );
}

function process_each(elements, cb, timeout, options = {}) {
    let i = 0;
    let l = elements.length;

    (function fn() {
        let result = cb.call(elements[i++]);
        if (i < l) {
            setTimeout(fn, timeout);
        } else {
            if (options.completeCallback || false) {
                options.completeCallback(result);
            }
        }
    }());
}

function random_string(length) {
    let result = '';
    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
    let charactersLength = characters.length;
    for (let i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() *
            charactersLength));
    }
    return result;
}

let grecaptchaWidget;
let grecaptchaWidgetResolver;
let CreatePromise = function (resolveCallback) {
    let resolved = false;
    let payload;
    let callbackList = [];

    resolveCallback(function(data) {
        resolved = true;
        payload = data;
        callbackList.forEach(function(f) { f() });
    });

    return {
        then: function (callback) { if (resolved) { callback(payload) } else { callbackList.push(function() { callback(payload) }) } }
    }
}

function recaptchaLoadCallback() {
    grecaptchaWidget = grecaptcha.render(document.getElementById('recaptcha-render'), {
        sitekey : recaptchaSiteKey,
        callback: function(response) {
            grecaptchaWidgetResolver(response);
        },
        'size' : "invisible"
    });
}

function loadRecapchaAndSubmit(callback) {
    if (typeof grecaptcha === 'undefined') {
        return;
    }

    let widgetPromise = CreatePromise(function(resolve) {
        grecaptchaWidgetResolver = resolve;
    });

    widgetPromise.then(function(result) {
        callback(result);
    });

    grecaptcha.reset(grecaptchaWidget);
    grecaptcha.execute(grecaptchaWidget)
        .catch(function (err) {
            console.err(err);
        });
}

function recapchaRenderTokenToForm(form) {
    if (typeof grecaptcha === 'undefined') {
        return true;
    }

    loadRecapchaAndSubmit(
        function (token) {
            let e = document.createElement('input');
            e.name = "g-recaptcha-response";
            e.value = token;
            e.type = 'hidden';
            form.appendChild(e);
            HTMLFormElement.prototype.submit.call(form);
        }
    );

    return false;
}

toastr.options.timeOut = 3000;

function toastr_message(message, status, title = null) {
    if (status == true) {
        toastr.success(message, title || mojar.lang.successfully + ' !!');
    } else {
        toastr.error(message, title || mojar.lang.error + ' !!');
    }
}

function confirm_message(question, callback, title = '', type = 'warning') {
    Swal.fire({
        title: title,
        text: question,
        type: type,
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: mojar.lang.yes + '!',
        cancelButtonText: mojar.lang.cancel + '!',
    }).then((result) => {
        callback(result.value);
    });
}

function get_message_response(response) {
    // Get response message
    if (response.data) {
        if (response.data.message) {
            return {
                status: response.status,
                message: response.data.message
            };
        }
        return false;
    }

    // Get message validate
    if (response.responseJSON) {
        if (response.responseJSON.errors) {
            let message = '';
            $.each(response.responseJSON.errors, function (index, msg) {
                message = msg[0];
                return false;
            });

            return {
                status: false,
                message: message
            };
        }

        else if (response.responseJSON.message) {
            return {
                status: false,
                message: response.responseJSON.message
            };
        }
    }

    // Get message errors
    if (response.message) {
        return {
            status: false,
            message: response.message.message
        };
    }
}

function show_message(response, append = false) {
    let msg = get_message_response(response);
    if (!msg) {
        return;
    }

    // let msgHTML = `<div class="alert alert-${msg.status ? 'success' : 'danger'} jw-message">
    //     <button type="button" class="close" data-dismiss="alert" aria-label="${mojar.lang.close}">
    //         <span aria-hidden="true">&times;</span>
    //     </button>

    //     ${msg.status ? '<i class="fa fa-check"></i>' : '<i class="fa fa-times"></i>'} ${msg.message}
    // </div>`;
    let msgHTML = `<div class="alert alert-${msg.status ? 'success' : 'danger'} alert-dismissible jw-message" role="alert">
        <div class="d-flex">
            <div>
                ${msg.status ? '<svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-check"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M5 12l5 5l10 -10" /></svg>' : '<svg xmlns="http://www.w3.org/2000/svg" class="icon alert-icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M5 12l5 5l10 -10" /></svg>'}
            </div>
            <div>
                ${msg.message}
            </div>
            <a class="btn-close" data-bs-dismiss="alert" aria-label="close" data-id="${msg.id}"></a>
        </div>
    </div>`;

    if (append) {
        $('#jquery-message').append(msgHTML);
    } else {
        $('#jquery-message').html(msgHTML);
    }
}

function show_notify(response) {
    let msg = get_message_response(response);
    toastr_message(msg.message, msg.status);
}

function htmlspecialchars(str) {
    str = String(str);
    return str.replace('&', '&amp;').replace('"', '&quot;').replace("'", '&#039;').replace('<', '&lt;').replace('>', '&gt;');
}

function toggle_global_loading(status, timeout = 300) {
    if (status) {
        $("#admin-overlay").fadeIn(300);
    } else {
        setTimeout(function () {
            $("#admin-overlay").fadeOut(300);
        }, timeout);
    }
}

$(document).ready(function () {

    $("body").on('click', '.custom-seo', function () {
        let item = $(this);
        let title = $('input[name=title]').val();
        let description = tinyMCE.activeEditor.getContent();

        if ($("#meta_title").val() && $("#meta_description").val()) {
            item.hide('slow');
            $(".box-custom-seo").show('slow');
            return false;
        }

        $.ajax({
            type: 'POST',
            url: mojar.adminUrl + '/ajax/seo-content',
            dataType: 'json',
            data: {
                'title': title,
                'description': description,
            }
        }).done(function (data) {

            if (data.status === false) {
                show_message(data);
                return false;
            }

            if (!$("#meta_title").val()) {
                $("#meta_title").val(data.title);
            }

            if (!$("#meta_description").val()) {
                $("#meta_description").val(data.description);
            }

            if (!$("#meta_title").val()) {
                $(".review-title").text(data.title);
            }

            if (!$("#meta_description").val()) {
                $(".review-description").text(data.description);
            }

            item.hide('slow');
            $(".box-custom-seo").show('slow');
            return false;
        }).fail(function (data) {
            show_message(data);
            return false;
        });
    });

    $("input[name=title], textarea[name=content]").on('change', function () {
        let title = $('input[name=title]').val();
        let description = tinyMCE.activeEditor.getContent();

        $.ajax({
            type: 'POST',
            url: mojar.adminUrl + '/ajax/seo-content',
            dataType: 'json',
            data: {
                'title': title,
                'description': description,
            }
        }).done(function (data) {

            if (data.status === false) {
                show_message(data);
                return false;
            }

            if (!$("#meta_title").val()) {
                $(".review-title").text(data.title);
            }

            if (!$("#meta_description").val()) {
                $(".review-description").text(data.description);
            }

            return false;
        }).fail(function (data) {
            show_message(data);
            return false;
        });
    });

    $('form').on('change', 'input[name=slug]', function () {
        let slug = $(this).val();
        $(".review-url span").text(slug);
    });

    $("#meta_title, #meta_description, #meta_url").on('change', function () {
        let title = $('#meta_title').val();
        let description = $('#meta_description').val();

        $.ajax({
            type: 'POST',
            url: mojar.adminUrl + '/ajax/seo-content',
            dataType: 'json',
            data: {
                'title': title,
                'description': description
            }
        }).done(function (data) {

            if (data.status === false) {
                show_message(data.message);
                return false;
            }

            $(".review-title").text(data.title);
            $(".review-description").text(data.description);
            //$(".review-url span").text(data.slug);
            //if (!$("#meta_url").val()) $("#meta_url").val(data.slug);
            return false;
        }).fail(function (data) {
            show_message(data);
            return false;
        });
    });

});

let mojarFileManager = function (options, cb) {
    let type = options.type || 'image';
    let disk = options.disk || null;
    let routePrefix = options.prefix;
    let multichoose = options.multichoose || false;

    if (routePrefix[0] !== '/') {
        routePrefix = '/' + routePrefix;
    }

    let dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;
    let w = options.width ? options.width : 800;
    let h = options.height ? options.height : 500;
    let dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;
    let width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;
    let height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;
    let systemZoom = width / window.screen.availWidth;
    let left = (width - w) / 2 / systemZoom + dualScreenLeft;
    let top = (height - h) / 2 / systemZoom + dualScreenTop;

    window.open(routePrefix + '?type=' + type + (multichoose ? '&multichoose=1' : '') + (disk ? '&disk=' + disk : ''), 'File Manager', 'scrollbars=yes, width=' + w / systemZoom + ', height=' + h / systemZoom + ', top=' + top + ', left=' + left);
    window.SetUrl = cb;
};

$.fn.filemanager = function (type, options) {
    let element = this;
    let prefix = mojar.adminPrefix + '/file-manager';
    this.on('click', function (e) {
        mojarFileManager({
            type: type,
            prefix: prefix
        }, function (files) {
            let file = files[0];

            if (element.data('input')) {
                let targetInput = $('#' + element.data('input'));
                targetInput.val(file.path);
            }

            if (element.data('preview')) {
                let targetPreview = $('#' + element.data('preview'));
                targetPreview.html('<img src="' + file.url + '" alt="' + file.name + '">');
            }

            if (element.data('name')) {
                let targetName = $('#' + element.data('name'));
                targetName.html(file.name);
            }
        });
    });
};

$(function () {
    const bodyElement = $('body');

    bodyElement.on('click', '.file-manager', function () {
        let type = $(this).data('type') || 'image';
        let input = $(this).data('input');
        let preview = $(this).data('preview');
        let name = $(this).data('name');
        let prefix = mojar.adminPrefix + '/file-manager';
        let disk = $(this).data('disk');

        mojarFileManager({
            type: type,
            prefix: prefix,
            disk: disk
        }, function (files) {
            let file = files[0];

            if (input) {
                let targetInput = $('#' + input);
                targetInput.val(file.path);
            }

            if (preview) {
                let targetPreview = $('#' + preview);
                targetPreview.html('<img src="' + file.url + '" alt="">');
            }

            if (name) {
                let targetName = $('#' + name);
                targetName.html(file.name);
            }
        });
    });

    bodyElement.on('click', '.form-image', function () {
        let item = $(this);
        let targetInput = item.find('.input-path');
        let targetPreview = item.find('.dropify-render');
        let targetName = item.find('.dropify-filename-inner');
        let prefix = mojar.adminPrefix + '/file-manager';

        mojarFileManager({
            type: 'image',
            prefix: prefix
        }, function (files) {
            let file = files[0];
            targetInput.val(file.path);
            targetPreview.html('<img src="' + file.url + '" alt="">');
            targetName.html(file.name);
            item.addClass('previewing');
            item.find('.image-hidden').show();
        });
    });

    bodyElement.on('click', '.form-image .image-clear', function (e) {
        e.stopPropagation();
        let item = $(this).closest('.form-image');
        let targetInput = item.find('.input-path');
        let targetPreview = item.find('.dropify-render');
        let targetName = item.find('.dropify-filename-inner');
        targetInput.val("");
        targetPreview.html('');
        targetName.html("");
        item.removeClass('previewing');
        item.find('.image-hidden').hide();
    });

    bodyElement.on('click', '.add-image-images', function () {
        let prefix = mojar.adminPrefix + '/file-manager';
        let item = $(this).closest('.form-images');
        let inputName = item.find('.input-name').val();

        mojarFileManager({
            type: 'image',
            prefix: prefix,
            multichoose: true
        }, function (files) {
            let temp = document.getElementById('form-images-template').innerHTML;
            let str = "";

            $.each(files, function (index, item) {
                str += replace_template(temp, {
                    name: inputName,
                    url: item.url,
                    path: item.path
                });
            });

            item.find('.images-list .image-item:last').before(str);
        });
    });

    bodyElement.on('click', '.form-images .remove-image-item', function () {
        $(this).closest('.image-item').remove();
    });
});

$(document).ready(function () {
    $('.jw-widget-builder').nestable({
        noDragClass: 'dd-nodrag',
        maxDepth: 1,
    });

    $('#widget-container').on('click', '.dropdown-action', function () {
        let blocks = $(this).closest('.widget-block').find('.sidebar-blocks');
        if (blocks.is(':hidden')) {
            blocks.show();
        } else {
            blocks.hide();
        }
    });

    $('#widget-container').on('submit', '.form-add-widget', function () {
        let form = $(this).serialize();
        let btn = $(this).find('button[type=submit]');
        let icon = btn.find('i').attr('class');

        btn.find('i').attr('class', 'fa fa-spinner fa-spin');
        btn.prop("disabled", true);

        ajaxRequest(mojar.adminUrl + '/widgets/get-item', form, {
            method: 'GET',
            callback: function (response) {
                let items = response.items || [];
                $.each(items, function (key, item) {
                    $('#sidebar-' + key + ' .jw-widget-builder .dd-empty').remove();
                    $('#sidebar-' + key + ' .dd-list').append(item.html);
                });

                $.each(items, function (key, item) {
                    initSelect2('#dd-item-' + item.key);
                });

                btn.find('i').attr('class', icon);
                btn.prop("disabled", false);
            },
            failCallback: function () {
                show_message(response);
                btn.find('i').attr('class', icon);
                btn.prop("disabled", false);
            }
        });

        return false;
    });

    $('#widget-container').on(
        'click',
        '.widget-sidebar-item',
        function () {
            let item = $(this);
            let isChecked = item.find('input').is(':checked');
            let form = item.closest('.form-add-widget');
            let btn = form.find('button[type=submit]');

            if (isChecked) {
                item.find('span').html('');
                item.find('input').prop('checked', false);
            } else {
                item.find('span').html(`<i class="fa fa-check"></i>`);
                item.find('input').prop('checked', true);
            }

            if (form.find('.widget-sidebar-item input:checked').length > 0) {
                btn.prop('disabled', false);
            } else {
                btn.prop('disabled', true);
            }
        }
    );

    $('#widget-container').on('click', '.show-edit-form', function () {
        let item = $(this);
        let form = item.closest('.sidebar-item').find('.card-body');
        if (form.is(':hidden')) {
            form.show();
        } else {
            form.hide();
        }
    });

    $('#widget-container').on('click', '.show-item-form', function () {
        let editForm = $(this).closest('.dd-item').find('.form-item-edit');
        if (editForm.is(':hidden')) {
            editForm.show();
        } else {
            editForm.hide();
        }
    });

    $('#widget-container').on(
        'click',
        '.delete-item-form',
        function () {
            $(this).closest('.dd-item').remove();
        }
    );
});

$(document).ready(function () {
    const mediaContainer = $('#media-container');
    mediaContainer.on('click', '.show-form-upload', function () {
        let form = $('.media-upload-form');

        if (form.is(':hidden')) {
            form.show('slow');
        } else {
            form.hide('slow');
        }
    });

    mediaContainer.on('click', '.media-file-item', function () {
        let temp = document.getElementById('media-detail-template').innerHTML;
        let info = JSON.parse($(this).find('.item-info').val());

        info.name = htmlspecialchars(info.name);
        temp = replace_template(temp, info);
        $('#preview-file').html(temp);
    });

    $('#preview-file').on('click', '.delete-file', function () {
        let id = $(this).data('id');
        let is_file = $(this).data('is_file');
        let name = $(this).data('name');

        confirm_message(
            mojar.lang.remove_question.replace(':name', (is_file == 1 ? ' file ' + name : ' folder ' + name)),
            function (value) {
                if (!value) {
                    return false;
                }

                toggle_global_loading(true);
                ajaxRequest(
                    mojar.adminUrl + '/media/' + id,
                    {
                        is_file: is_file
                    },
                    {
                        method: 'DELETE',
                        callback: function (response) {
                            toggle_global_loading(false);
                            show_notify(response);

                            setTimeout(
                                function () {
                                    window.location = "";
                                },
                                500
                            );
                        },
                        failCallback: function (response) {
                            toggle_global_loading(false);
                            show_notify(response);
                        }
                    }
                );
            }
        );
    });
});

$(document).ready(function () {
    var updateOutput = function (e) {
        var list = e.length ? e : $(e.target);
        if (window.JSON) {
            $('#items-output').val(window.JSON.stringify(list.nestable('serialize')));
        } else {
            alert('JSON browser support required for this application.');
        }
    };

    $('#jw-menu-builder').nestable({
        noDragClass: 'dd-nodrag',
    }).on('change', updateOutput);

    updateOutput($('#jw-menu-builder'));

    $('#menu-container').on('submit', '.form-menu-block', function (event) {
        if (event.isDefaultPrevented()) {
            return false;
        }

        event.preventDefault();
        var form = $(this);
        var formData = new FormData(form[0]);
        var btnsubmit = form.find("button[type=submit]");
        var currentIcon = btnsubmit.find('i').attr('class');

        btnsubmit.find('i').attr('class', 'fa fa-spinner fa-spin');
        btnsubmit.prop("disabled", true);

        $.ajax({
            type: form.attr('method'),
            url: form.attr('action'),
            dataType: 'json',
            data: formData,
            cache: false,
            contentType: false,
            processData: false
        }).done(function (response) {

            btnsubmit.find('i').attr('class', currentIcon);
            btnsubmit.prop("disabled", false);

            if (response.status === false) {
                show_message(response);
                return false;
            }

            let items = response.data.items;
            if (items.length > 0) {
                $('#jw-menu-builder .dd-empty').remove();

                $.each(items, function (index, item) {
                    $('#jw-menu-builder .dd-list:first').append(item);
                });
            }

            updateOutput($('#jw-menu-builder'));
            form.find('.reset-after-add').val('');

            return false;
        }).fail(function (response) {
            btnsubmit.find('i').attr('class', currentIcon);
            btnsubmit.prop("disabled", false);

            show_message(response);
            return false;
        });
    });

    $('#menu-container').on('click', '.btn-add-menu', function () {
        let eForm = $('.form-add-menu');
        if (eForm.is(':hidden')) {
            eForm.show('slow');
        } else {
            eForm.hide('slow');
        }
    });

    $('#menu-container').on('change', '.form-select-menu .load-menu', function () {
        let id = $(this).val();
        if (id) {
            window.location = mojar.adminUrl + "/menus/" + id;
        }
    });

    $('#menu-container').on('click', '.card-menu-show', function () {
        let cardBody = $(this).closest('.card-menu-items').find('.card-body');
        if (cardBody.is(':hidden')) {
            $('.card-menu-items').find('.card-body').slideUp('slow');
            $('.card-menu-items').find('.card-header').removeClass('bg-light');
            $(this).closest('.card-menu-items').find('.card-header').addClass('bg-light');
            cardBody.slideDown('slow');
        } else {
            cardBody.slideUp('slow');
            $(this).closest('.card-menu-items').find('.card-header').removeClass('bg-light');
        }
    });

    $('#menu-container').on('click', '.show-menu-edit', function (e) {
        let formEdit = $(this).closest('.dd-item').find('.form-item-edit').first();
        if (formEdit.is(':hidden')) {
            formEdit.slideDown('slow');
        } else {
            formEdit.slideUp('slow');
        }
    });

    $('#menu-container').on('click', '.delete-menu', function (e) {
        let id = $(this).data('id');

        confirm_message(
            mojar.lang.remove_question.replace(':name', mojar.lang.menu),
            function (result) {
                if (result) {
                    ajaxRequest(
                        mojar.adminUrl + "/menus/" + id,
                        {},
                        {
                            'method': 'DELETE',
                            'callback': function (response) {
                                show_message(response);
                                window.location = mojar.adminUrl + "/menus";
                            }
                        }
                    );
                }
            }
        );
    });

    $('#menu-container').on('change', '.menu-data', function () {
        let name = $(this).data('name');
        let val = $(this).val();

        $(this).closest('li').data(name, val);
        updateOutput($('#jw-menu-builder'));

        if ($(this).hasClass('change-label')) {
            $(this).closest('li').find('.dd-handle span:first').text(val);
        }
    });

    $('#menu-container').on('click', '.delete-menu-item', function () {
        $(this).closest('li').remove();
        updateOutput($('#jw-menu-builder'));
    });

    $('#menu-container').on('click', '.close-menu-item', function () {
        let formEdit = $(this).closest('.dd-item').find('.form-item-edit').first();
        if (formEdit.is(':hidden')) {
            formEdit.slideDown('slow');
        } else {
            formEdit.slideUp('slow');
        }
    });

    $('#menu-container').on('change', '.select-all-checkbox', function () {
        let select = $(this).data('select');
        let checked = $(this).is(':checked');
        $(this).closest('.tab-pane').find('.' + select).prop('checked', checked);
    });

    $('#menu-container').on('keyup', '.menu-box-post-type-search', function () {
        let search = $(this).val();
        let key = $(this).data('key');
        let postType = $(this).data('post_type');
        let resultElement = $(this)
            .closest('.tab-pane')
            .find('.box-tab-search-result');
        resultElement.html('');

        if (search.length <= 0) {
            return false;
        }

        ajaxRequest(mojar.adminUrl + '/load-data/loadPostType', {
            search: search,
            per_page: 5,
            post_type: postType
        }, {
            method: 'GET',
            callback: function (response) {
                let temps = '';
                $.each(response.results, function (index, item) {
                    temps += `<div class="form-check mt-1">
                        <label class="form-check-label">
                            <input class="form-check-input select-all-search-${key}" type="checkbox" name="items[]" value="${item.id}">
                            ${item.text}
                        </label>
                    </div>`;
                });

                resultElement.html(temps);

                return false;
            }
        });

        return false;
    });

    $('#menu-container').on('keyup', '.menu-box-taxonomy-search', function () {
        let search = $(this).val();
        let key = $(this).data('key');
        let taxonomy = $(this).data('taxonomy');
        let resultElement = $(this)
            .closest('.tab-pane')
            .find('.box-tab-search-result');
        resultElement.html('');

        if (search.length <= 0) {
            return false;
        }

        ajaxRequest(mojar.adminUrl + '/load-data/loadTaxonomies', {
            search: search,
            per_page: 5,
            taxonomy: taxonomy
        }, {
            method: 'GET',
            callback: function (response) {
                let temps = '';
                $.each(response.results, function (index, item) {
                    temps += `<div class="form-check mt-1">
                        <label class="form-check-label">
                            <input class="form-check-input select-all-search-${key}" type="checkbox" name="items[]" value="${item.id}">
                            ${item.text}
                        </label>
                    </div>`;
                });

                resultElement.html(temps);

                return false;
            }
        });

        return false;
    });

    function initializeMenuModal() {
        const formContent = $('.form-add-menu').detach();
        $('#form-add-menu').append(formContent);

        $('.btn-add-menu').on('click', function(e) {
            e.preventDefault();
            $('#add-menu-modal').modal('show');
        });

        $('#form-add-menu form').on('submit', function(e) {
            e.preventDefault();
            const form = $(this);
            const submitBtn = form.find('button[type="submit"]');

            submitBtn.prop('disabled', true)
                .html('<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span> ' +
                      submitBtn.text());

            $.ajax({
                url: form.attr('action'),
                type: 'POST',
                data: form.serialize(),
                success: function(response) {
                    if (response.status === true) {
                        Swal.fire({
                            text: response.message || 'Menu created successfully',
                            icon: 'success',
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 3000,
                            customClass: {
                                popup: 'notification-toast'
                            }
                        });

                        form[0].reset();
                        $('#add-menu-modal').modal('hide');

                        if (typeof response.redirect !== 'undefined') {
                            window.location = response.redirect;
                        }
                    }
                },
                error: function(xhr) {
                    let errorMessage = 'Failed to create menu';
                    try {
                        const response = JSON.parse(xhr.responseText);
                        errorMessage = response.message || errorMessage;
                    } catch (e) {
                        console.error('Error parsing response:', e);
                    }

                    Swal.fire({
                        text: errorMessage,
                        icon: 'error',
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000,
                        customClass: {
                            popup: 'notification-toast'
                        }
                    });
                },
                complete: function() {
                    submitBtn.prop('disabled', false)
                        .html(submitBtn.data('original-text') || submitBtn.text());
                }
            });
        });

        $('#form-add-menu form button[type="submit"]').each(function() {
            $(this).data('original-text', $(this).html());
        });
    }

    initializeMenuModal();
});

function jwUpdateProcess(
    processElement,
    message = null,
    percent = 0,
    status = 'primary'
) {
    if (message) {
        $(processElement + ' .process-text').append(`<li class="text-${status}">${message}</li>`);
    }

    if (percent) {
        $(processElement + ' .progress-bar')
            .attr('aria-valuenow', percent)
            .text(percent + '%')
            .css('width', percent + '%');
    }
}

function jwCMSUpdate(
    type,
    step,
    processElement = null,
    params = {},
    successCallback = null,
    failCallback = null
) {
    let cmsUpdateUrl = mojar.adminUrl + '/update/' + type + '/__STEP__';

    if (processElement) {
        jwUpdateProcess(
            processElement,
            mojar.lang.update_process['step' + step].before
        )
    }

    ajaxRequest(cmsUpdateUrl.replace('__STEP__', step), params, {
        method: 'POST',
        callback: function (response) {
            if (response.status == false) {
                if (failCallback) {
                    failCallback(response);
                }

                if (processElement) {
                    jwUpdateProcess(
                        processElement,
                        response.data.message,
                        0,
                        'danger'
                    );
                }
                return false;
            }

            if (response.data.next_url) {
                if (processElement) {
                    jwUpdateProcess(processElement, null, step * 17);
                }

                jwCMSUpdate(
                    type,
                    step + 1,
                    processElement,
                    params,
                    successCallback,
                    failCallback
                );
            } else {
                if (successCallback) {
                    successCallback(response);
                }

                if (processElement) {
                    jwUpdateProcess(
                        processElement,
                        mojar.lang.update_process.done,
                        100,
                        'success'
                    );
                }
            }
        },
        failCallback: function (response) {
            let message = response.message || 'Server Error';
            if (failCallback) {
                failCallback(response);
            }

            if (processElement) {
                jwUpdateProcess(
                    processElement,
                    message,
                    step * 15,
                    'danger'
                );
            }
        }
    })
}

function recursiveUpdate(
    type,
    items,
    updateIndex = 0,
    successCallback = null,
    failCallback = null
) {
    let params = {};
    if (type == 'theme') {
        params = { theme: items[updateIndex] };
    } else {
        params = { plugin: items[updateIndex] };
    }

    jwCMSUpdate(
        type,
        1,
        '#' + type + '-' + items[updateIndex].replace('/', '_') + '-update-process',
        params,
        function (response) {
            if (items[updateIndex + 1]) {
                recursiveUpdate(type, items, updateIndex + 1, successCallback, failCallback);
            } else {
                if (successCallback) {
                    successCallback(response);
                }
            }
        },
        function (response) {
            if (failCallback) {
                failCallback(response);
            }

            if (items[updateIndex + 1]) {
                recursiveUpdate(type, items, updateIndex + 1, successCallback, failCallback);
            }
        }
    );
}

$(document).ready(function () {
    let bodyElement = $('body');

    console.log('plugin-install');
    
    bodyElement.on('click', '.install-plugin', function () {
        let plugin = $(this).data('plugin');
        let btn = $(this);
        let spinnerEl = btn.find('.install-spinner');
        let textEl = btn.find('.install-text');
        let cardEl = btn.closest('.card');
        let progressEl = cardEl.find('.progress-bar');
        let toastEl = $(`#installationToast-${plugin}`);
        
        // Update UI to installation state
        btn.prop("disabled", true);
        textEl.text(mojar.lang.installing || 'Installing...');
        spinnerEl.show();
        
        // Show progress animation
        progressEl.addClass('progress-bar-animated progress-bar-striped')
                 .css('width', '100%')
                 .attr('aria-valuenow', 100);

        // Install plugin
        jwCMSUpdate(
            'plugin',
            1,
            null,
            { plugin: plugin },
            function (response) {
                // Success callback
                showInstallationStatus(toastEl, 'success', mojar.lang.install_success || 'Plugin installed successfully!');
                
                // Update button to activation state
                textEl.text(mojar.lang.activate);
                btn.removeClass('install-plugin')
                   .addClass('active-plugin')
                   .prop("disabled", false);
                
                spinnerEl.hide();
                progressEl.removeClass('progress-bar-animated progress-bar-striped');
            },
            function (response) {
                // Error callback
                showInstallationStatus(toastEl, 'error', response.message || mojar.lang.install_failed || 'Installation failed');
                
                // Reset button state
                textEl.text(mojar.lang.install);
                btn.prop("disabled", false);
                spinnerEl.hide();
                progressEl.removeClass('progress-bar-animated progress-bar-striped')
                         .css('width', '0%');
            }
        );
    });

    bodyElement.on('click', '.active-plugin', function () {
        let plugin = $(this).data('plugin');
        let btn = $(this);
        let spinnerEl = btn.find('.install-spinner');
        let textEl = btn.find('.install-text');
        let toastEl = $(`#installationToast-${plugin}`);

        // Update UI
        btn.prop("disabled", true);
        textEl.text(mojar.lang.activating || 'Activating...');
        spinnerEl.show();

        ajaxRequest(mojar.adminUrl + '/plugins/bulk-actions', {
            ids: [plugin],
            action: 'activate',
        }, {
            method: 'POST',
            callback: function (response) {
                showInstallationStatus(toastEl, 'success', response.message || mojar.lang.activation_success);
                
                // Update button to activated state
                textEl.html(`<i class="fa fa-check"></i> ${mojar.lang.activated}`);
                btn.removeClass('active-plugin')
                   .addClass('btn-success')
                   .prop("disabled", true);
                
                spinnerEl.hide();
            },
            failCallback: function (response) {
                showInstallationStatus(toastEl, 'error', response.message || mojar.lang.activation_failed);
                
                // Reset button state
                textEl.text(mojar.lang.activate);
                btn.prop("disabled", false);
                spinnerEl.hide();
            }
        });
    });

    // Helper function to show installation status
    function showInstallationStatus(toastEl, status, message) {
        const toast = new bootstrap.Toast(toastEl);
        const statusIcon = toastEl.find('.status-icon');
        
        // Set status icon
        if (status === 'success') {
            statusIcon.html(`
                <svg xmlns="http://www.w3.org/2000/svg" class="icon text-success" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                    <path d="M5 12l5 5l10 -10" />
                </svg>
            `);
        } else {
            statusIcon.html(`
                <svg xmlns="http://www.w3.org/2000/svg" class="icon text-danger" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                    <path d="M18 6l-12 12" />
                    <path d="M6 6l12 12" />
                </svg>
            `);
        }

        // Set message and show toast
        toastEl.find('.toast-body').text(message);
        toast.show();
    }
});

// $(document).ready(function () {
//     let bodyElement = $('body');
//     bodyElement.on('click', '.install-plugin', function () {
//         let plugin = $(this).data('plugin');
//         let btn = $(this);
//         let btnText = btn.html();
//         btn.prop("disabled", true);
//         btn.html('<i class="fa fa-spinner fa-spin"></i> ' + mojar.lang.please_wait);

//         jwCMSUpdate(
//             'plugin',
//             1,
//             null,
//             { plugin: plugin },
//             function (response) {
//                 btn.html(mojar.lang.activate);
//                 btn.removeClass('install-plugin');
//                 btn.addClass('active-plugin');
//                 btn.prop("disabled", false);
//             },
//             function (response) {
//                 show_message(response);
//                 btn.prop("disabled", false);
//                 btn.html(btnText);
//             }
//         );
//     });

//     bodyElement.on('click', '.active-plugin', function () {
//         let plugin = $(this).data('plugin');
//         let btn = $(this);
//         btn.prop("disabled", true);

//         ajaxRequest(mojar.adminUrl + '/plugins/bulk-actions', {
//             ids: [plugin],
//             action: 'activate',
//         }, {
//             method: 'POST',
//             callback: function (response) {
//                 show_message(response);
//                 btn.html(`<i class="fa fa-check"></i> ${mojar.lang.activated}`);
//                 btn.removeClass('active-plugin');
//                 btn.prop("disabled", true);
//             },
//             failCallback: function (response) {
//                 show_message(response);
//                 btn.prop("disabled", false);
//             }
//         });
//     });
// });

$(document).ready(function () {
    let bodyElement = $('body');

    bodyElement.on('click', '.update-theme', function () {
        let theme = $(this).data('theme');
        let btn = $(this);
        let btnText = btn.html();
        btn.prop("disabled", true);
        btn.html('<i class="fa fa-spinner fa-spin"></i> ' + mojar.lang.please_wait);

        jwCMSUpdate(
            'theme',
            1,
            null,
            { theme: theme },
            function (response) {
                btn.remove();
                show_message(response);
            },
            function (response) {
                btn.prop("disabled", false);
                btn.html(btnText);
                show_message(response);
            }
        );
    });

    bodyElement.on('click', '.install-theme', function () {
        let theme = $(this).data('theme');
        let btn = $(this);
        let btnText = btn.html();
        btn.prop("disabled", true);
        btn.html('<i class="fa fa-spinner fa-spin"></i> ' + mojar.lang.please_wait);

        jwCMSUpdate(
            'theme',
            1,
            null,
            { theme: theme },
            function (response) {
                btn.html(mojar.lang.activate);
                btn.removeClass('install-theme');
                btn.addClass('active-theme');
                btn.prop("disabled", false);
            },
            function (response) {
                show_message(response);
                btn.prop("disabled", false);
                btn.html(btnText);
            }
        );
    });

    bodyElement.on('click', '.active-theme', function () {
        let theme = $(this).data('theme');
        let btn = $(this);
        btn.prop("disabled", true);

        ajaxRequest(mojar.adminUrl + '/themes/activate', {
            theme: theme
        }, {
            method: 'POST',
            callback: function (response) {
                show_message(response);
                btn.html(`<i class="fa fa-check"></i> ${mojar.lang.activated}`);
                btn.removeClass('active-theme');
                btn.prop("disabled", true);
            },
            failCallback: function (response) {
                show_message(response);
                btn.prop("disabled", false);
            }
        });
    });

    bodyElement.on('click', '.delete-theme', function () {
        let theme = $(this).data('theme');
        let btn = $(this);
        let btnText = btn.html();

        confirm_message(
            mojar.lang.delete_theme_confirm,
            function (result) {
                if (!result) {
                    return false;
                }

                btn.html('<i class="fa fa-spinner fa-spin"></i> ' + mojar.lang.please_wait);

                ajaxRequest(mojar.adminUrl + '/themes/bulk-actions', {
                    ids: [theme],
                    action: 'delete'
                }, {
                    method: 'POST',
                    callback: function (response) {
                        show_message(response);
                        if (response.status == true) {
                            btn.closest('.theme-list-item').remove();
                        }
                    },
                    failCallback: function (response) {
                        show_message(response);
                        btn.html(btnText);
                    }
                });
            });
    });

    bodyElement.on('click', '.buy-theme', function () {
        let btn = $(this);
        let module = btn.data('theme');
        let btnText = btn.html();

        btn.prop('disabled', true);
        btn.html('<i class="fa fa-spinner fa-spin"></i>');

        ajaxRequest(
            mojar.adminUrl + '/module/theme/buy-modal',
            {
                module: module
            },
            {
                method: 'GET',
                callback: function (response) {
                    $('#show-modal').empty().html(response.data.html);
                    $('#show-modal .modal').modal();

                    btn.html(btnText);
                    btn.prop('disabled', false);
                },
                failCallback: function (response) {
                    show_message(response);

                    btn.html(btnText);
                    btn.prop('disabled', false);
                }
            }
        );
    });

    bodyElement.on('submit', '#form-activation-code, #form-select-key', function (event) {
        if (event.isDefaultPrevented()) {
            return false;
        }

        event.preventDefault();

        let form = $(this);
        let btn = form.find('button[type=submit]');
        let module = form.find('input[name=module]').val();
        let key = form.find('[name=key]').val();
        let btnText = btn.html();

        if (!key) {
            return false;
        }

        btn.prop('disabled', true);
        btn.html('<i class="fa fa-spinner fa-spin"></i> ' + mojar.lang.please_wait);

        ajaxRequest(
            mojar.adminUrl + '/module/theme/activation-code',
            {
                module: module,
                key: key
            },
            {
                method: 'POST',
                callback: function (response) {
                    if (response.status !== true) {
                        show_message(response);
                        btn.html(btnText);
                        btn.prop('disabled', false);
                        return false;
                    }

                    form.find('input[name=key]').closest('.form-group').hide();
                    btn.html('<i class="fa fa-spinner fa-spin"></i> ' + mojar.lang.installing);

                    jwCMSUpdate(
                        'theme',
                        1,
                        null,
                        { theme: module },
                        function (response) {
                            btn.html(mojar.lang.activate);
                            btn.removeClass('install-theme');
                            btn.addClass('active-theme');
                            btn.data('theme', module);
                            btn.prop("disabled", false);
                        },
                        function (response) {
                            show_message(response);
                            btn.prop("disabled", false);
                            btn.html(btnText);
                        }
                    );

                    return false;
                },
                failCallback: function (response) {
                    show_message(response);

                    btn.html(btnText);
                    btn.prop('disabled', false);
                    return false;
                }
            }
        );

        return false;
    });

    bodyElement.on('submit', '#form-login-mojar', function (event) {
        if (event.isDefaultPrevented()) {
            return false;
        }

        event.preventDefault();

        let form = $(this);
        let btn = form.find('button[type=submit]');
        let module = form.find('input[name=module]').val();
        let email = form.find('input[name=email]').val();
        let password = form.find('input[name=password]').val();
        let btnText = btn.html();

        if (!email || !password) {
            return false;
        }

        btn.prop('disabled', true);
        btn.html('<i class="fa fa-spinner fa-spin"></i> ' + mojar.lang.please_wait);

        ajaxRequest(
            mojar.adminUrl + '/module/login-mojar',
            {
                module: module,
                email: email,
                password: password
            },
            {
                method: 'POST',
                callback: function (response) {
                    if (response.status !== true) {
                        show_message(response);
                        btn.html(btnText);
                        btn.prop('disabled', false);
                        return false;
                    }

                    ajaxRequest(
                        mojar.adminUrl + '/module/theme/buy-modal',
                        {
                            module: module
                        },
                        {
                            method: 'GET',
                            callback: function (response) {
                                $('#show-modal .modal').modal('hide');
                                $('#show-modal').empty().html(response.data.html);
                                $('#show-modal .modal').modal();
                            },
                            failCallback: function (response) {
                                show_message(response);

                                btn.html(btnText);
                                btn.prop('disabled', false);
                            }
                        }
                    );

                    return false;
                },
                failCallback: function (response) {
                    show_message(response);

                    btn.html(btnText);
                    btn.prop('disabled', false);
                    return false;
                }
            }
        );

        return false;
    });
});

function initSelect2(parent = 'body') {
    $(parent + ' .select2').select2({
        allowClear: true,
        dropdownAutoWidth: !$(this).data('width'),
        width: $(this).data('width') || '100%',
        placeholder: function (params) {
            return {
                id: null,
                text: params.placeholder,
            }
        },
    });

    $(parent + ' .select2-default').select2({
        width: $(this).data('width') || '100%',
        dropdownAutoWidth: !$(this).data('width'),
    });

    $(parent + ' .load-taxonomies').select2({
        allowClear: true,
        dropdownAutoWidth: !$(this).data('width'),
        width: $(this).data('width') || '100%',
        placeholder: function (params) {
            return {
                id: null,
                text: params.placeholder,
            }
        },
        ajax: {
            method: 'GET',
            url: mojar.adminUrl + '/load-data/loadTaxonomies',
            dataType: 'json',
            data: function (params) {
                let postType = $(this).data('post-type');
                let taxonomy = $(this).data('taxonomy');
                let explodes = $(this).data('explodes');
                if (explodes) {
                    explodes = $("." + explodes).map(function () {
                        return $(this).val();
                    }).get();
                }

                return {
                    search: $.trim(params.term),
                    page: params.page,
                    explodes: explodes,
                    post_type: postType,
                    taxonomy: taxonomy
                };
            }
        }
    });

    $(parent + ' .load-users').select2({
        allowClear: true,
        dropdownAutoWidth: !$(this).data('width'),
        width: $(this).data('width') || '100%',
        placeholder: function (params) {
            return {
                id: null,
                text: params.placeholder,
            }
        },
        ajax: {
            method: 'GET',
            url: '/' + mojar.adminPrefix + '/load-data/loadUsers',
            dataType: 'json',
            data: function (params) {
                let explodes = $(this).data('explodes') ? $(this).data('explodes') : null;
                if (explodes) {
                    explodes = $("." + explodes).map(function () { return $(this).val(); }).get();
                }

                return {
                    search: $.trim(params.term),
                    page: params.page,
                    explodes: explodes,
                };
            }
        },
    });

    $(parent + ' .load-menu').select2({
        allowClear: true,
        dropdownAutoWidth: !$(this).data('width'),
        width: $(this).data('width') || '100%',
        placeholder: function (params) {
            return {
                id: null,
                text: params.placeholder,
            }
        },
        ajax: {
            method: 'GET',
            url: '/' + mojar.adminPrefix + '/load-data/loadMenu',
            dataType: 'json',
            data: function (params) {
                let explodes = $(this).data('explodes') ? $(this).data('explodes') : null;
                if (explodes) {
                    explodes = $("." + explodes).map(function () { return $(this).val(); }).get();
                }

                return {
                    search: $.trim(params.term),
                    page: params.page,
                    explodes: explodes,
                };
            }
        },
    });

    $(parent + ' .load-pages').select2({
        allowClear: true,
        dropdownAutoWidth: !$(this).data('width'),
        width: $(this).data('width') || '100%',
        placeholder: function (params) {
            return {
                id: null,
                text: params.placeholder,
            }
        },
        ajax: {
            method: 'GET',
            url: '/' + mojar.adminPrefix + '/load-data/loadPages',
            dataType: 'json',
            data: function (params) {
                return {
                    search: $.trim(params.term),
                    page: params.page
                };
            }
        },
    });

    $(parent + ' .load-posts').select2({
        allowClear: true,
        dropdownAutoWidth: !$(this).data('width'),
        width: $(this).data('width') || '100%',
        placeholder: function (params) {
            return {
                id: null,
                text: params.placeholder,
            }
        },
        ajax: {
            method: 'GET',
            url: '/' + mojar.adminPrefix + '/load-data/loadPosts',
            dataType: 'json',
            data: function (params) {
                let type = $(this).data('type') ? $(this).data('type') : null;
                return {
                    search: $.trim(params.term),
                    page: params.page,
                    type: type,
                };
            }
        },
    });

    $(parent + ' .load-locales').select2({
        allowClear: true,
        dropdownAutoWidth: !$(this).data('width'),
        width: $(this).data('width') || '100%',
        placeholder: function (params) {
            return {
                id: null,
                text: params.placeholder,
            }
        },
        ajax: {
            method: 'GET',
            url: '/' + mojar.adminPrefix + '/load-data/loadLocales',
            dataType: 'json',
            data: function (params) {
                let type = $(this).data('type') ? $(this).data('type') : null;
                let explodes = $(this).data('explodes') ? $(this).data('explodes') : null;
                return {
                    search: $.trim(params.term),
                    page: params.page,
                    type: type,
                    explodes: explodes
                };
            }
        },
    });

    $(parent + ' .load-select2').select2({
        allowClear: true,
        dropdownAutoWidth: !$(this).data('width'),
        width: $(this).data('width') || '100%',
        placeholder: function (params) {
            return {
                id: null,
                text: params.placeholder,
            }
        },
        ajax: {
            method: 'GET',
            url: $(this).data('url') || '',
            dataType: 'json',
            data: function (params) {
                return {
                    search: $.trim(params.term),
                    page: params.page
                };
            }
        },
    });

    $(parent + ' .load-resources').select2({
        allowClear: true,
        dropdownAutoWidth: !$(this).data('width'),
        width: $(this).data('width') || '100%',
        placeholder: function (params) {
            return {
                id: null,
                text: params.placeholder,
            }
        },
        ajax: {
            method: 'GET',
            url: mojar.adminUrl + '/load-data/loadResource',
            dataType: 'json',
            data: function (params) {
                let type = $(this).data('type');
                let explodes = $(this).data('explodes');

                if (explodes) {
                    explodes = $("." + explodes).map(function () {
                        return $(this).val();
                    }).get();
                }

                return {
                    search: $.trim(params.term),
                    page: params.page,
                    explodes: explodes,
                    type: type
                };
            }
        }
    });

    $(parent + ' .load-subscription-objects').select2({
        allowClear: true,
        dropdownAutoWidth: !$(this).data('width'),
        width: $(this).data('width') || '100%',
        placeholder: function (params) {
            return {
                id: null,
                text: params.placeholder,
            }
        },
        ajax: {
            method: 'GET',
            url: mojar.adminUrl + '/load-data/loadSubscriptionObjects',
            dataType: 'json',
            data: function (params) {
                let module = $(this).data('module');

                return {
                    search: $.trim(params.term),
                    page: params.page,
                    module: module
                };
            }
        }
    });
}

$(document).ready(function () {
    initSelect2('body');
});

class MojarTable {

    constructor(e) {
        this.url = e.url;
        this.action_url = e.action_url;
        this.remove_url = e.remove_url || null;
        this.status_url = e.status_url || null;
        this.remove_question = (e.remove_question) ? e.remove_question : mojar.lang.remove_question.replace(':name', mojar.lang.the_selected_items);
        this.detete_button = (e.detete_button) ? e.detete_button : "#delete-item";
        this.status_button = (e.status_button) ? e.status_button : ".status-button";
        this.apply_button = (e.apply_button) ? e.apply_button : "#apply-action";
        this.table = (e.table) ? e.table : '.mojar-table';
        this.field_id = (e.field_id) ? e.field_id : 'id';
        this.form_search = (e.form_search) ? juzawebe.form_search : "#form-search";
        this.sort_name = (e.sort_name) ? e.sort_name : 'id';
        this.sort_order = (e.sort_order) ? e.sort_order : 'desc';
        this.page_size = (e.page_size) ? e.page_size : 10;
        this.search = (e.search) ? e.search : false;
        this.method = (e.method) ? e.method : 'get';
        this.locale = (e.locale) ? e.locale : 'en-US';
        this.chunk_action = (e.chunk_action) ? e.chunk_action : false;
        this.inputRow = "";
        this.init();
    }

    init() {
        let apply_button = $(this.apply_button);
        let btn_status = $(this.status_button);
        let bulkActionButton = $('.bulk-actions-button');

        apply_button.prop('disabled', true);
        btn_status.prop('disabled', true);
        bulkActionButton.prop('disabled', true);

        let table = $(this.table);
        let form_search = this.form_search;
        let action_url = this.action_url;
        let remove_question = this.remove_question;
        let data_url = this.url;
        let field_id = this.field_id;
        let method = this.method;
        let locale = this.locale;
        let status_url = this.status_url;
        let chunk_action = this.chunk_action;

        table.bootstrapTable({
            url: data_url,
            idField: field_id,
            method: method,
            locale: locale,
            sidePagination: 'server',
            pagination: true,
            sortName: this.sort_name,
            sortOrder: this.sort_order,
            toggle: 'table',
            search: this.search,
            pageSize: this.page_size,
            queryParams: function (params) {
                let fieldSearch = $(form_search).serializeArray();
                $.each(fieldSearch, function (i, item) {
                    if (params[item.name]) {
                        params[item.name] += ',' + item.value;
                    } else {
                        params[item.name] = item.value;
                    }
                });
                return params;
            }
        });

        function action_button() {
            let tblSelection = !table.bootstrapTable('getSelections').length;
            apply_button.prop('disabled', tblSelection);
            bulkActionButton.prop('disabled', tblSelection);
        }

        $(this.form_search).on('change', 'select, input', function (event) {
            if (event.isDefaultPrevented()) {
                return false;
            }

            event.preventDefault();
            table.bootstrapTable('refresh');
            return false;
        });

        $(this.form_search).on('submit', function (event) {
            if (event.isDefaultPrevented()) {
                return false;
            }

            event.preventDefault();
            table.bootstrapTable('refresh');
            return false;
        });

        table.on('check.bs.table uncheck.bs.table ' +
            'check-all.bs.table uncheck-all.bs.table ' +
            'pre-body.bs.table', () => {
                action_button();
            });

        apply_button.on('click', function () {
            let btn = $(this);
            let form = btn.closest('form');
            let text = btn.html();
            let action = form.find('select[name=bulk_actions]').val();
            let token = form.find('input[name=_token]').val();
            let ids = $("input[name=btSelectItem]:checked").map(function () { return $(this).val(); }).get();

            if (!ids || !action) {
                return false;
            }

            if (action == 'delete') {
                confirm_message(remove_question, function (result) {
                    if (!result) {
                        return false;
                    }

                    btn.html(mojar.lang.please_wait);
                    btn.prop("disabled", true);

                    ajaxRequest(action_url, {
                        'ids': ids,
                        'action': action,
                        '_token': token
                    }, {
                        callback: function (response) {
                            btn.prop("disabled", false);
                            btn.html(text);

                            if (response.status === true) {
                                show_message(response);

                                if (response.data.window_redirect) {
                                    window.location = response.data.window_redirect;
                                    return false;
                                }

                                if (response.data.redirect) {
                                    setTimeout(function () {
                                        window.location = response.data.redirect;
                                    }, 1000);
                                    return false;
                                }

                                table.bootstrapTable('refresh');
                                $('select[name=bulk_actions]').val(null).trigger('change.select2');
                                return false;
                            } else {
                                show_message(response);
                                return false;
                            }
                        }
                    });
                });
            } else {
                btn.html(mojar.lang.please_wait);
                btn.prop("disabled", true);

                if (chunk_action) {
                    let items = $("input[name=btSelectItem]:checked");
                    setTimeout(function () {
                        let response;
                        process_each(items, function () {
                            let id = $(this).val();
                            $(this).hide();
                            $(this).closest('label')
                                .find('span')
                                .html(`<i class="fa fa-spinner fa-spin"></i>`);

                            response = ajaxRequest(action_url, {
                                'ids': [id],
                                'action': action,
                                '_token': token
                            }, {
                                async: false,
                                callback: function (response) {
                                    return false;
                                }
                            });

                            return response;
                        }, 500, {
                            completeCallback: function (response) {
                                show_message(response);

                                if (response.data.redirect) {
                                    setTimeout(function () {
                                        window.location = response.data.redirect;
                                    }, 1000);
                                    return false;
                                }

                                if (response.data.window_redirect) {
                                    setTimeout(function () {
                                        window.location = response.data.window_redirect;
                                    }, 1000);
                                    return false;
                                }

                                btn.prop("disabled", false);
                                btn.html(text);

                                table.bootstrapTable('refresh');

                                $('select[name=bulk_actions]').val(null).trigger('change.select2');
                            }
                        });

                    }, 500);

                } else {
                    ajaxRequest(action_url, {
                        'ids': ids,
                        'action': action,
                        '_token': token
                    }, {
                        callback: function (response) {
                            if (response.status === true) {
                                show_message(response);

                                if (response.data.window_redirect) {
                                    window.location = response.data.window_redirect;
                                    return false;
                                }

                                if (response.data.redirect) {
                                    setTimeout(function () {
                                        window.location = response.data.redirect;
                                    }, 1000);
                                    return false;
                                }

                                if (response.data.window_redirect) {
                                    setTimeout(function () {
                                        window.location = response.data.window_redirect;
                                    }, 1000);
                                    return false;
                                }

                                btn.prop("disabled", false);
                                btn.html(text);

                                table.bootstrapTable('refresh');
                                $('select[name=bulk_actions]').val(null).trigger('change.select2');
                                return false;
                            } else {
                                show_message(response);
                                return false;
                            }
                        }
                    });
                }
            }

            return false;
        });

        $('.bulk-actions-actions').on('click', '.select-action', function () {
            let btn = bulkActionButton;
            let text = btn.html();
            let action = $(this).data('action');
            let form = $(this).closest('form');
            let token = form.find('input[name=_token]').val();
            let ids = $("input[name=btSelectItem]:checked").map(function () { return $(this).val(); }).get();
            bulkActionButton.dropdown('toggle');

            if (!ids || !action) {
                return false;
            }

            if (action == 'delete') {
                confirm_message(remove_question, function (result) {
                    if (!result) {
                        return false;
                    }

                    btn.html(mojar.lang.please_wait);
                    btn.prop("disabled", true);

                    ajaxRequest(action_url, {
                        'ids': ids,
                        'action': action,
                        '_token': token
                    }, {
                        callback: function (response) {
                            btn.prop("disabled", false);
                            btn.html(text);

                            if (response.status === true) {
                                show_message(response);

                                if (response.data.window_redirect) {
                                    window.location = response.data.window_redirect;
                                    return false;
                                }

                                if (response.data.redirect) {
                                    setTimeout(function () {
                                        window.location = response.data.redirect;
                                    }, 1000);
                                    return false;
                                }

                                table.bootstrapTable('refresh');
                                return false;
                            } else {
                                show_message(response);
                                return false;
                            }
                        }
                    });
                });
            } else {
                btn.html(mojar.lang.please_wait);
                btn.prop("disabled", true);

                if (chunk_action) {
                    let items = $("input[name=btSelectItem]:checked");
                    setTimeout(function () {
                        let response;
                        process_each(items, function () {
                            let id = $(this).val();
                            $(this).hide();
                            $(this).closest('label')
                                .find('span')
                                .html(`<i class="fa fa-spinner fa-spin"></i>`);

                            response = ajaxRequest(action_url, {
                                'ids': [id],
                                'action': action,
                                '_token': token
                            }, {
                                async: false,
                                callback: function (response) {
                                    return false;
                                }
                            });

                            return response;
                        }, 500, {
                            completeCallback: function (response) {
                                show_message(response);

                                if (response.data.redirect) {
                                    setTimeout(function () {
                                        window.location = response.data.redirect;
                                    }, 1000);
                                    return false;
                                }

                                if (response.data.window_redirect) {
                                    setTimeout(function () {
                                        window.location = response.data.window_redirect;
                                    }, 1000);
                                    return false;
                                }

                                btn.prop("disabled", false);
                                btn.html(text);

                                table.bootstrapTable('refresh');
                            }
                        });

                    }, 500);

                } else {
                    ajaxRequest(action_url, {
                        'ids': ids,
                        'action': action,
                        '_token': token
                    }, {
                        callback: function (response) {
                            if (response.status === true) {
                                show_message(response);

                                if (response.data.window_redirect) {
                                    window.location = response.data.window_redirect;
                                    return false;
                                }

                                if (response.data.redirect) {
                                    setTimeout(function () {
                                        window.location = response.data.redirect;
                                    }, 1000);
                                    return false;
                                }

                                if (response.data.window_redirect) {
                                    setTimeout(function () {
                                        window.location = response.data.window_redirect;
                                    }, 1000);
                                    return false;
                                }

                                btn.prop("disabled", false);
                                btn.html(text);

                                table.bootstrapTable('refresh');
                                return false;
                            } else {
                                show_message(response);
                                return false;
                            }
                        }
                    });
                }
            }

            return false;
        });

        btn_status.on('click', function () {
            let ids = $("input[name=btSelectItem]:checked").map(function () { return $(this).val(); }).get();
            let status = $(this).data('status');

            if (ids.length <= 0) {
                return false;
            }

            $.ajax({
                type: "POST",
                url: status_url,
                dataType: 'json',
                data: {
                    'ids': ids,
                    'status': status,
                },
                success: function (result) {
                    if (result.status === true) {
                        table.bootstrapTable('refresh');
                        btn_status.prop('disabled', true);
                        $('.items-checked').prop('disabled', true);
                        return false;
                    } else {
                        show_message(result);
                        return false;
                    }
                }
            });

            return false;
        });

        table.on('click', '.action-item', function () {
            let ids = [$(this).data('id')];
            let action = $(this).data('action');

            if (action == 'delete') {
                Swal.fire({
                    title: '',
                    text: remove_question,
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: mojar.lang.yes + '!',
                    cancelButtonText: mojar.lang.cancel + '!',
                }).then((result) => {
                    if (result.value) {
                        $(this).html(mojar.lang.please_wait);

                        $.ajax({
                            type: "POST",
                            url: action_url,
                            dataType: 'json',
                            data: {
                                'ids': ids,
                                'action': action
                            },
                            success: function (response) {
                                if (response.data.window_redirect) {
                                    show_message(response);
                                    window.location = response.data.window_redirect;
                                    return false;
                                }

                                if (response.data.redirect) {
                                    show_message(response);
                                    setTimeout(function () {
                                        window.location = response.data.redirect;
                                    }, 1000);
                                    return false;
                                }

                                table.bootstrapTable('refresh');
                            }
                        });
                    }
                });
            } else {
                $(this).html(mojar.lang.please_wait);

                $.ajax({
                    type: "POST",
                    url: action_url,
                    dataType: 'json',
                    data: {
                        'ids': ids,
                        'action': action
                    },
                    success: function (response) {
                        if (response.data.window_redirect) {
                            show_message(response);
                            window.location = response.data.window_redirect;
                            return false;
                        }

                        if (response.data.redirect) {
                            show_message(response);
                            setTimeout(function () {
                                window.location = response.data.redirect;
                            }, 1000);
                            return false;
                        }

                        table.bootstrapTable('refresh');
                    }
                });
            }

            return false;
        });
    }

    refresh(options = {}) {
        if (options) {
            $(this.table).bootstrapTable('refreshOptions', options);
        } else {
            $(this.table).bootstrapTable('refresh', options);
        }
    }
}

class MojarListView {
    constructor(e) {
        this.url = e.url;
        this.list = (e.list) ? e.list : '.mojar-list';
        this.method = (e.method) ? e.method : 'get';
        this.template = (e.template) ? e.template : null;
        this.sort_name = (e.sort_name) ? e.sort_name : 'id';
        this.sort_order = (e.sort_order) ? e.sort_order : 'desc';
        this.page_size = (e.page_size) ? e.page_size : 10;
        this.after_load_callback = (e.after_load_callback) ? e.after_load_callback : null;
        this.item_formatter = (e.item_formatter) ? e.item_formatter : null;
        this.offset = 0;
        this.total = 0;
        this.page = 1;
        this.init();
    }

    init() {
        let item = this;
        item.loadData();

        $(window).scroll(function () {
            if ($(window).scrollTop() === $(document).height() - $(window).height()) {
                if (item.offset + item.page_size < item.total) {
                    item.page = item.page + 1;
                    item.loadData();
                }
            }
        });
    }

    loadData() {
        let template = this.template ? document.getElementById(this.template).innerHTML : null;
        let result = $(this.list);
        let itemFormatter = this.item_formatter;

        if (this.page > 1) {
            this.offset = (this.page * this.page_size) - this.page_size;
        }

        let jqxhr = $.ajax({
            type: this.method,
            url: this.url,
            dataType: 'json',
            cache: false,
            async: false,
            data: {
                page: this.page,
                limit: this.page_size
            }
        });

        let response = jqxhr.responseJSON;
        this.total = response.meta.total;

        let html = '';
        if (response.data.length > 0) {
            $.each(response.data, function (index, item) {
                if (itemFormatter) {
                    html = eval(itemFormatter)(index, item);
                } else {
                    html += replace_template(template, item);
                }
            });

            result.append(html);
        }

        if (this.after_load_callback) {
            eval(this.after_load_callback)();
        }
    }
}

/*
 * Mojar 1.0 - Form Ajax support
 *
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 *
 * Date: 2021-03-12T21:04Z
 */

$(document).ready(function () {
    function sendMessageByResponse(response, notify = false) {
        if (notify) {
            if (typeof show_notify !== 'undefined' && typeof show_notify === 'function') {
                show_notify(response);
            }
        } else {
            if (typeof show_message !== 'undefined' && typeof show_message === 'function') {
                show_message(response);
            }
        }
    }

    function sendRequestFormAjax(form, data, btnsubmit, currentText, currentIcon, captchaToken = null) {
        let submitSuccess = form.data('success');
        let notify = form.data('notify') || false;

        if (captchaToken) {
            data.append('g-recaptcha-response', captchaToken);
        }

        $.ajax({
            type: form.attr('method'),
            url: form.attr('action'),
            dataType: 'json',
            data: data,
            cache: false,
            contentType: false,
            processData: false
        }).done(function(response) {
            sendMessageByResponse(response, notify);

            if (submitSuccess) {
                eval(submitSuccess)(form, response);
            }

            if (response.data.redirect) {
                setTimeout(function () {
                    window.location = response.data.redirect;
                }, 1000);
                return false;
            }

            btnsubmit.find('i').attr('class', currentIcon);
            btnsubmit.prop("disabled", false);

            if (btnsubmit.data('loading-text')) {
                btnsubmit.html(currentText);
            }

            if (response.status === false) {
                return false;
            }

            return false;
        }).fail(function(response) {
            btnsubmit.find('i').attr('class', currentIcon);
            btnsubmit.prop("disabled", false);

            if (btnsubmit.data('loading-text')) {
                btnsubmit.html(currentText);
            }

            sendMessageByResponse(response, notify);
            return false;
        });
    }

    $(document).on('submit', '.form-ajax', function(event) {
        if (event.isDefaultPrevented()) {
            return false;
        }

        event.preventDefault();

        let form = $(this);
        let formData = new FormData(form[0]);
        let btnsubmit = form.find("button[type=submit]");
        let currentText = btnsubmit.html();
        let currentIcon = btnsubmit.find('i').attr('class');

        btnsubmit.find('i').attr('class', 'fa fa-spinner fa-spin');
        btnsubmit.prop("disabled", true);

        if (btnsubmit.data('loading-text')) {
            btnsubmit.html('<i class="fa fa-spinner fa-spin"></i> ' + btnsubmit.data('loading-text'));
        }

        if (typeof grecaptcha !== 'undefined') {
            loadRecapchaAndSubmit(
                function (token) {
                    sendRequestFormAjax(
                        form,
                        formData,
                        btnsubmit,
                        currentText,
                        currentIcon,
                        token
                    );
                }
            );
            return false;
        }

        sendRequestFormAjax(
            form,
            formData,
            btnsubmit,
            currentText,
            currentIcon
        );
    });

    $(document).on('click', '.load-modal', function(event) {
        if (event.isDefaultPrevented()) {
            return false;
        }

        event.preventDefault();
        let data = $(this).data();
        let btnsubmit = $(this);
        let currentIcon = btnsubmit.find('i').attr('class');

        btnsubmit.find('i').attr('class', 'fa fa-spinner fa-spin');
        btnsubmit.prop("disabled", true);
        btnsubmit.addClass("disabled");

        let query_str = '';
        $.each(data, function (index, item) {
            if (index !== 'url') {
                query_str += '&'+index+'='+item;
            }
        });

        let url = $(this).data('url');

        if (query_str) {
            url = url + "?"+query_str;
        }

        $.ajax({
            type: 'GET',
            url: url,
            dataType: 'json',
            data: {},
            cache:false,
            contentType: false,
            processData: false
        }).done(function(response) {

            btnsubmit.find('i').attr('class', currentIcon);
            btnsubmit.prop("disabled", false);
            btnsubmit.removeClass("disabled");

            if (response.status === false) {
                return false;
            }

            $('#show-modal').html(response.data.source);
            $('#show-modal .modal').modal();

            return false;
        }).fail(function(response) {
            btnsubmit.find('i').attr('class', currentIcon);
            btnsubmit.prop("disabled", false);

            /*show_message(response);*/
            return false;
        });
    });

    $(document).on('keypress', '.is-number', function () {
        return validate_isNumberKey(this);
    });

    $(document).on('keyup', '.number-format', function () {
        return validate_FormatNumber(this);
    });

    function validate_isNumberKey(evt) {
        let charCode = (evt.which) ? evt.which : event.keyCode;
        if (charCode == 59 || charCode == 46)
            return true;
        if (charCode > 31 && (charCode < 48 || charCode > 57))
            return false;
        return true;
    }

    function validate_FormatNumber(a) {
        a.value = a.value.replace(/\,/gi, "");
        a.value = a.value.replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
    }
});

$(document).ready(function () {
    $('.form-taxonomy').on('click', '.add-new', function () {
        let formAdd = $(this).closest('.form-taxonomy').find('.form-add');
        if (formAdd.is(':visible')) {
            formAdd.hide('slow');
        } else {
            formAdd.show('slow');
        }
    });

    $('body').on('change', '.select-tags', function () {
        let item = $(this);
        let id = item.val();
        let taxonomy = item.data('taxonomy');
        let type = item.data('type');

        $.ajax({
            type: 'GET',
            url: mojar.adminUrl + '/taxonomy/' + type + '/' + taxonomy + '/component-item',
            dataType: 'json',
            data: {
                'id': id
            }
        }).done(function (response) {
            if (response.status === false) {
                show_message(response);
                return false;
            }

            item.closest('.form-taxonomy')
                .find('.show-tags')
                .append(response.data.html);

            item.val(null).trigger('change.select2');

            return false;
        }).fail(function (response) {
            show_message(response);
            return false;
        });
    });

    $(document).on('click', '.remove-tag-item', function () {
        $(this).closest('.tag').remove();
    });

    $(document).on('click', '.form-add-taxonomy button', function () {
        let btn = $(this);
        let taxForm = btn.closest('.form-add');
        let name = taxForm.find('.taxonomy-name').val();
        let parent = taxForm.find('.taxonomy-parent').val();
        let type = btn.data('type');
        let taxonomy = btn.data('taxonomy');
        let postType = btn.data('post_type');
        let icon = btn.find('i').attr('class');

        btn.find('i').attr('class', 'fa fa-spinner fa-spin');
        btn.prop("disabled", true);

        $.ajax({
            type: 'POST',
            url: mojar.adminUrl + '/taxonomy/' + type + '/' + taxonomy,
            dataType: 'json',
            data: {
                name: name,
                parent_id: parent,
                post_type: postType,
                taxonomy: taxonomy,
            }
        }).done(function (response) {
            btn.find('i').attr('class', icon);
            btn.prop("disabled", false);

            if (response.status === false) {
                show_message(response);
                return false;
            }

            let addForm = btn.closest('.form-taxonomy').find('.show-tags');
            if (addForm.length) {
                addForm.append(response.data.html);
            } else {
                let res = response.data.item;
                let htmlItem = `<li class="m-1" id="item-category-${res.id}">
                    <div class="custom-control custom-checkbox">
                        <input type="checkbox" name="${res.taxonomy}[]" class="custom-control-input" id="${res.taxonomy}-${res.id}" value="${res.id}" checked>
                        <label class="custom-control-label" for="${res.taxonomy}-${res.id}">${res.name}</label>
                    </div>
                </li>`;

                if (parent) {
                    addForm = btn.closest('.form-taxonomy').find('.show-taxonomies ul #item-category-' + res.parent_id + ' ul:first');
                    if (addForm.length) {
                        addForm.append(htmlItem);
                    } else {
                        htmlItem = '<ul class="mt-2 p-0">' + htmlItem + '</ul>';
                        btn.closest('.form-taxonomy').find('.show-taxonomies ul #item-category-' + res.parent_id)
                            .append(htmlItem);
                    }
                } else {
                    btn.closest('.form-taxonomy')
                        .find('.show-taxonomies ul:first')
                        .append(htmlItem);
                }
            }

            taxForm.find('.taxonomy-name').val('');
            if (parent) {
                taxForm.find('.taxonomy-parent').val(null).trigger('change.select2');
            }

            return false;
        }).fail(function (response) {
            btn.find('i').attr('class', icon);
            btn.prop("disabled", false);
            show_message(response);
            return false;
        });
    });
});

function addStyleSubmenu(e) {
    var t = e.find(".mojar__menuLeft__navigation"),
        n = e.offset().top,
        i = $(window).scrollTop(),
        o = n - i - 30,
        e = n + t.height() + 1,
        n = 60 + e - $('.mojar__layout').height(),
        i = $(window).height() + i - 50;

    if ((n = o < (n = i < e - n ? e - i : n) ? o : n) > 1 && n > 40) {
        t.css("margin-top", "-" + n + "px");
    } else {
        t.css("margin-top", "");
    }
}

$(document).ready(function () {
    let bodyElement = $('body');

    bodyElement.on('change', '.show_on_front-change', function () {
        let showOnFront = $(this).val();

        if (showOnFront == 'posts') {
            $('.select-show_on_front').prop('disabled', true);
        }

        if (showOnFront == 'page') {
            $('.select-show_on_front').prop('disabled', false);
        }
    });

    bodyElement.on('click', '.cancel-button', function () {
        window.location = "";
    });

    bodyElement.on('change', '.generate-slug', function () {
        let title = $(this).val();

        ajaxRequest(mojar.adminUrl + '/load-data/generateSlug', {
            title: title
        }, {
            method: 'GET',
            callback: function (response) {
                $('input[name=slug]').val(response.slug).trigger('change');
            }
        });
    });

    bodyElement.on('click', '.slug-edit', function () {
        let slugInput = $(this).closest('.input-group').find('input:first');
        slugInput.prop('readonly', !slugInput.prop('readonly'));
    });

    bodyElement.on('click', '.close-message', function () {
        let id = $(this).data('id');
        ajaxRequest(mojar.adminUrl + '/remove-message', {
            id: id,
        }, {
            method: 'POST',
            callback: function (response) {

            }
        });
    });

    $(".mojar__menuLeft__submenu").on("mouseover", function () {
        if (!$(this).hasClass('mojar__menuLeft__submenu--toggled')) {
            addStyleSubmenu($(this));
        }
    }
    );
});

$(document).ready(function () {

});

$(document).ready(function () {
    let urlParams = new URLSearchParams(window.location.search);
    let template = urlParams.get('template');
    let bodyElement = $('body');

    if (template) {
        $('select[name="meta[template]"]').val(template).trigger('change');
    }

    bodyElement.on('click', '.show-form-block', function () {
        let form = $(this).closest('.dd-item').find('.form-block-edit');
        if (form.is(':hidden')) {
            form.show('slow');
        } else {
            form.hide('slow');
        }
    });

    bodyElement.on('click', '.remove-form-block', function () {
        $(this).closest('.dd-item').remove();
    });

    bodyElement.on('change', 'select[name="meta[template]"]', function () {
        let template = $(this).val();
        if (!template) {
            return false;
        }

        let currentUrl = window.location.href;
        currentUrl = currentUrl.split("?")[0];
        window.location = currentUrl + '?template=' + template;
    });

    bodyElement.on('click', '.add-block-data', function () {
        let block = $(this).data('block');
        let contentKey = $(this).data('content_key');
        let item = $(this);
        let template = document.getElementById('block-'+ block + '-template').innerHTML;
        let marker = (new Date()).getTime();
        template = replace_template(template, {
            'marker': marker,
            'content_key': contentKey,
        });

        item.closest('.page-block-content').find('.dd-empty').remove();
        item.closest('.page-block-content').find('.dd-list').append(template);

        initSelect2('#page-block-' + marker);
    });
});
